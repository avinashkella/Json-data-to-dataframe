# -*- coding: utf-8 -*-
"""Json_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KbeONGiv9xi63ZQFHpz1IMxM-5UGaavW
"""

# import Libraries
import pandas as pd
import json

df = pd.read_json("schools-additional.json")

df

# load data using Python JSON module
with open('schools-additional.json','r') as f:
    data = json.loads(f.read())

df_nested_list = pd.json_normalize(data, record_path =['school_details'],  meta=['id', 'score'])

df_nested_list

df_nested_list["other_references"]

for i, l in enumerate(df_nested_list["other_references"]):
    print("list",i,"is",type(l))

def to_1D(series):
 return pd.Series([x for _list in series for x in _list])

all_records = to_1D(df_nested_list["other_references"]).value_counts()
all_records

# What is the average number of "other_references" in all the data
df_nested_list["other_references"].str.len()

# how many students have only 2 items in their "other_references" list
df_nested_list.loc[df_nested_list["other_references"].str.len() == 2, 'id']

total = df_nested_list["other_references"].str.len().sum()

# What percentage of students have 2, or more than 3 items in "other_references". how many have 4 or more?
(((df_nested_list["other_references"].str.len() == 2).sum() / (total)) * 100).sum()

(((df_nested_list["other_references"].str.len() == 3).sum() / (total)) * 100).sum()

(((df_nested_list["other_references"].str.len() == 4) / (total)).sum() * 100).sum()

df_nested_list["meal"] == "lunch"

df_nested_list["meal"]

df_nested_list['id'].unique()

# How many students have "meal":"lunch"?
df_nested_list.loc[df_nested_list["meal"] == "lunch", 'id'].unique()

# how many of all records have "meal":"lunch"
lunch = (df_nested_list.loc[df_nested_list["meal"] == "lunch", 'id']).count()
lunch

total = df_nested_list.shape[0]
total

# What percentage are they of the data?
(lunch/total) * 100

#  How many records in total, regardless of which student have more than 2 items in "other_references"?
(df_nested_list["other_references"].str.len() != 2).sum()

# how many records are null in "other_references"?
(df_nested_list["other_references"].str.len() == 1).sum()

# concatenate all items in "other_references"
all_records.sum()

df_nested_list.astype(str)

for i, l in enumerate(df_nested_list["id"]):
    print("list",i,"is",type(l))

# what is the average size/length of the resulting strings
x = []
for col in df_nested_list.columns:
  c = df_nested_list[col].tolist()
  x.append(c)
concat_list = [j for i in x for j in i]
len(concat_list)